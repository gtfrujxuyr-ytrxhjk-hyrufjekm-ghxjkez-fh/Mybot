name: Build-Stockfish-Ultra

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-22.04

    steps:
    - uses: actions/checkout@v4

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y clang lld ninja-build cmake zip python3

    - name: Clone Stockfish @ ce73441f
      run: |
        git clone https://github.com/official-stockfish/Stockfish.git engines/stockfish_src
        cd engines/stockfish_src
        git checkout ce73441f2013e0b8fd3eb7a0c9fd391d52adde70

    # Stage 1: Instrumented build (for profile generation)
    - name: Stage 1 – Instrumented build
      run: |
        cd engines/stockfish_src
        cmake -B build-pgo -G Ninja -DCMAKE_C_COMPILER=clang -DCMAKE_CXX_COMPILER=clang++ \
              -DCMAKE_BUILD_TYPE=RelWithDebInfo -DUSE_PGO_GENERATE=ON -DUSE_LTO=ON -DARCH=x86-64-bmi2
        cmake --build build-pgo -j$(nproc)

    # Run benchmark to generate .profraw data
    - name: Generate profile data
      run: |
        cd engines/stockfish_src
        ./build-pgo/src/stockfish bench 64 1 15 default depth 15

    # Stage 2: Optimized final build using profile data
    - name: Stage 2 – Optimized PGO + ThinLTO build
      run: |
        cd engines/stockfish_src
        cmake -B build-final -G Ninja -DCMAKE_C_COMPILER=clang -DCMAKE_CXX_COMPILER=clang++ \
              -DCMAKE_BUILD_TYPE=Release -DUSE_PGO_USE=ON -DUSE_LTO=ON -DARCH=x86-64-bmi2
        cmake --build build-final -j$(nproc)
        strip build-final/src/stockfish

    - name: Zip the binary
      run: |
        cd engines/stockfish_src/build-final/src
        zip ../../../../stockfish_bmi2_ultra.zip stockfish

    - name: Upload ultra Stockfish
      uses: actions/upload-artifact@v4
      with:
        name: stockfish-bmi2-ultra
        path: stockfish_bmi2_ultra.zip
